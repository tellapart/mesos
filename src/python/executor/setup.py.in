#!/usr/bin/env python

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Add native to the python path so we can import the ext_modules module.
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'native')))

import ext_modules
native_module = ext_modules.create_module('executor')
native_module.define_macros = [("PY_EXECUTOR_ONLY", "1")]
# Dont include the scheduler CPP files.
native_module.sources = [f for f in native_module.sources if 'scheduler' not in f]

config = {
    'name': 'mesos.executor',
    'version': '@PACKAGE_VERSION@',
    'description': 'Mesos executor driver implementation',
    'author': 'Apache Mesos',
    'author_email': 'dev@mesos.apache.org',
    'url': 'http://pypi.python.org/pypi/mesos.executor',
    'namespace_packages': [ 'mesos' ],
    'packages': [ 'mesos', 'mesos.executor' ],
    'package_dir': { '': 'src' },
    'install_requires': [ 'mesos.interface == @PACKAGE_VERSION@' ],
    'license': 'Apache 2.0',
    'keywords': 'mesos',
    'classifiers': [ ],
    'ext_modules': [ native_module ]
}

from setuptools import setup
from setuptools.command.build_ext import build_ext
import os
import shutil

# Copy all cpp files from native/src/mesos/native to executor/sec/mesos/executor
# so we can build them.
class custom_build_ext(build_ext):
    def run(self):
        root = os.path.join('..', 'native', 'src', 'mesos', 'native')
        dest = os.path.join('src', 'mesos', 'executor')
        for f in os.listdir(root):
            if f.endswith('.cpp') and not 'scheduler' in f:
                shutil.copy(os.path.join(root, f), os.path.join(dest, f))

        build_ext.run(self)

config['cmdclass'] = {'build_ext': custom_build_ext}
setup(**config)
